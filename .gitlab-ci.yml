# ---------------------------------------------------------------------------
variables:
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  CI_APPLICATION_TAG: $CI_COMMIT_SHA
  CI_CONTAINER_NAME: ci_job_build_${CI_JOB_ID}

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x
  function registry_login() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    #"$CI_REGISTRY_PASSWORD"
      echo ""
    fi
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function build() {
    registry_login

    echo "Building Dockerfile-based application..."
    docker build \
      --build-arg HTTP_PROXY="$HTTP_PROXY" \
      --build-arg http_proxy="$http_proxy" \
      --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
      --build-arg https_proxy="$https_proxy" \
      --build-arg FTP_PROXY="$FTP_PROXY" \
      --build-arg ftp_proxy="$ftp_proxy" \
      --build-arg NO_PROXY="$NO_PROXY" \
      --build-arg no_proxy="$no_proxy" \
      -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:latest"
    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    docker push "$CI_APPLICATION_REPOSITORY:latest"
    echo ""
  }
# ---------------------------------------------------------------------------


stages:
  - build
  - staging
  - test
  - deploy
  - monitoring
  
build:site:
  tags: [docker]
  image: jekyll/builder:4
  stage: build
  script:
    - gem install jekyll-toc
    - jekyll build
  artifacts:
    paths:
      - _site/
      - _drafts/staging/httpd.conf

build:staging:
  tags: [docker]
  image: docker:stable-git
  stage: staging
  services:
    - docker:stable-dind
  dependencies:
    - build:site
  before_script:
    - *auto_devops
  script:
    - cp _drafts/staging/Dockerfile _site/
    - cp _drafts/staging/http2.conf _site/
    - cd _site/
    - mv htaccess .htaccess
    - setup_docker
    - build
  only:
    - branches

build:test:
  tags: [docker]
  # before_script:
  #   - *auto_devops
  #   - registry_login
  stage: test
  # Deploy the docker image somewhere as a service.
  services: 
    - name: $CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG
      alias: site    
  # Use another docker image as a driver
  image: ubuntu:bionic
  script:
  # Check we can reach the main site, without an error.
    - apt-get update -y && apt-get install -y curl
    - curl -I -L -f http://site/
    - curl -I -L -f http://site/construction_guide.html 
    - curl -I -L -f http://site/wiki/lego
deploy:
  stage: deploy
  only: [master]
  dependencies:
    - build:site
  script:
    - apt-get update -qq && apt-get install -y rsync
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$ORIONROBOTS_HOST_KEYS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "$ORIONROBOTS_DEPLOY_CONFIG" > ~/.ssh/config
    - echo "$ORIONROBOTS_DEPLOY_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - rsync -avv _site/ orionrobots_host:public_html
    - scp _site/htaccess orionrobots_host:public_html/.htaccess
    # checks
    - curl -I -L -f https://orionrobots.co.uk/
    - curl -I -L -f https://orionrobots.co.uk/construction_guide.html 
    - curl -I -L -f https://orionrobots.co.uk/wiki/lego
  environment:
      name: production
      url: https://orionrobots.co.uk

monitoring:link-checker:
  when: manual
  stage: monitoring
  script:
    - apt-get -y update && apt-get install -y ca-certificates
    - apt-get install -y linkchecker
    - apt-get install -y python3-pip
    - pip3 install jinja2
    - cd _drafts/linkchecker/
    - linkchecker http://orionrobots.co.uk/ --no-warnings --timeout=20 -ocsv >result.csv
    - python3 filter_csv.py result.csv >result.html
  artifacts:
    paths:
      - result.html


