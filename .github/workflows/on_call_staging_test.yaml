---
on:
  workflow_call:

jobs:
  staging_test:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      CACHE_IMAGE: orionrobots/orionrobots-site
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    steps:
      - uses: actions/checkout@v5
      - name: Fetch site artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: _site
      - name: extract site artifact
        run: |
          tar -xzf _site.tar.gz

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Prepare staging context  
        run: |
          # Copy staging files into the _site directory for the docker build
          cp .github/scripts/staging/default.conf _site/httpd.conf
          # Also copy default.conf for the consolidated Dockerfile to support fallback
          cp .github/scripts/staging/default.conf _site/default.conf
          
      - name: Run as service and test
        run: |
          # Start the staging service using docker compose with --wait for health checks
          # Use CI-specific override for GitHub Actions cache
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d --build --wait staging
          
          # Perform the tests
          set +e  # Don't exit on error so we can clean up
          set -o pipefail  # Ensure pipeline returns exit code of first failing command
          exit_code=0
          
          curl -I -f http://localhost:8080/ || exit_code=1
          curl -I -f http://localhost:8080/construction_guide.html || exit_code=1
          curl -I -f http://localhost:8080/wiki/lego || exit_code=1
          
          # Run BDD integration tests using docker compose
          echo "## BDD Test Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run test 2>&1 | tee bdd_output.txt
          bdd_result=$?
          
          # Filter output to show only BDD test results, excluding Docker build output
          # Look for lines starting with "> orionrobots.github.io@" and capture everything after that
          awk '
            /^> orionrobots\.github\.io@/ { found=1 }
            found { print }
          ' bdd_output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          if [ $bdd_result -eq 0 ]; then
            echo "✅ BDD tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ BDD tests failed" >> $GITHUB_STEP_SUMMARY
            exit_code=1
          fi
          
          # Stop the service regardless of test outcome
          docker compose -f docker-compose.yml -f docker-compose.ci.yml stop staging
          
          # Exit with the test result
          exit $exit_code
